{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Two-dimensional batch linear programming on the GPU Description A high-performance, graphical processing unit-based algorithm for efficiently solving two-dimensional linear programs in batches. The domain of two-dimensional linear programs is particularly useful due to the prevalence of relevant geometric problems. Batch linear programming refers to solving numerous different linear programs within one operation. By solving many linear programs simultaneously and distributing workload evenly across threads, graphical processing unit utilization can be maximized. Speedups of over 22 times and 63 times are obtained against state-of-the-art graphics processing unit and CPU linear program solvers, respectively. 2-D linear problems are sets of equations of the form $ax + by < c$ with a function to maximise/minimise of the form $ix + jy$. Requirements x64 CPU architecture Nvidia GPU with compute capability > 30 (most GPUs from 2013 onwards) Cuda 8.0 compiler or later. Some form of C compiler. Software Source code is freely available from Github Publication \"Two-Dimensional Batch Linear Programming on the GPU\" Journal of Parallel and Distributed Computing April 2019 https://doi.org/10.1016/j.jpdc.2019.01.001 PDF available here Full published text avaiable until March 15th","title":"Home"},{"location":"#two-dimensional-batch-linear-programming-on-the-gpu","text":"","title":"Two-dimensional batch linear programming on the GPU"},{"location":"#description","text":"A high-performance, graphical processing unit-based algorithm for efficiently solving two-dimensional linear programs in batches. The domain of two-dimensional linear programs is particularly useful due to the prevalence of relevant geometric problems. Batch linear programming refers to solving numerous different linear programs within one operation. By solving many linear programs simultaneously and distributing workload evenly across threads, graphical processing unit utilization can be maximized. Speedups of over 22 times and 63 times are obtained against state-of-the-art graphics processing unit and CPU linear program solvers, respectively. 2-D linear problems are sets of equations of the form $ax + by < c$ with a function to maximise/minimise of the form $ix + jy$.","title":"Description"},{"location":"#requirements","text":"x64 CPU architecture Nvidia GPU with compute capability > 30 (most GPUs from 2013 onwards) Cuda 8.0 compiler or later. Some form of C compiler.","title":"Requirements"},{"location":"#software","text":"Source code is freely available from Github","title":"Software"},{"location":"#publication","text":"\"Two-Dimensional Batch Linear Programming on the GPU\" Journal of Parallel and Distributed Computing April 2019 https://doi.org/10.1016/j.jpdc.2019.01.001 PDF available here Full published text avaiable until March 15th","title":"Publication"},{"location":"about/","text":"Building The Code Code must be built before it can be ran. Obtain the code from Github . This uses CMAKE to generate the build files. CMAKE Set CMake to build from the root directory of the downloaded folder. Add the correct architecture for your GPU using -arch=sm_xx under CMAKE_CUDA_FLAGS , replacing xx with the relevant version e.g. for a GTX 970, which uses compute 3.5, use -arch=sm_35 Check out this list for help discovering your compute version * This should generate the relevant solution/makefile Running The Program","title":"About"},{"location":"about/#building-the-code","text":"Code must be built before it can be ran. Obtain the code from Github . This uses CMAKE to generate the build files.","title":"Building The Code"},{"location":"about/#cmake","text":"Set CMake to build from the root directory of the downloaded folder. Add the correct architecture for your GPU using -arch=sm_xx under CMAKE_CUDA_FLAGS , replacing xx with the relevant version e.g. for a GTX 970, which uses compute 3.5, use -arch=sm_35 Check out this list for help discovering your compute version * This should generate the relevant solution/makefile","title":"CMAKE"},{"location":"about/#running-the-program","text":"","title":"Running The Program"}]}